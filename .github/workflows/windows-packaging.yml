name: Windows packaging

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install NSIS (if needed)
        shell: pwsh
        run: |
          choco install nsis -y
          $chocBin = 'C:\ProgramData\chocolatey\bin'
          $nsisLib = 'C:\ProgramData\chocolatey\lib\nsis'
          if (Test-Path $chocBin) {
            Add-Content -Path $env:GITHUB_PATH -Value $chocBin
            Write-Host "Added $chocBin to GITHUB_PATH"
          }
          if (Test-Path "$nsisLib\tools") {
            Add-Content -Path $env:GITHUB_PATH -Value "$nsisLib\tools"
            Write-Host "Added $nsisLib\tools to GITHUB_PATH"
          }
          # Also check common Program Files locations and add them if NSIS is installed there
          if (Test-Path "$env:ProgramFiles\NSIS") {
            Add-Content -Path $env:GITHUB_PATH -Value "$env:ProgramFiles\NSIS"
            Write-Host "Added $env:ProgramFiles\NSIS to GITHUB_PATH"
          }
          if (Test-Path "$env:ProgramFiles(x86)\NSIS") {
            Add-Content -Path $env:GITHUB_PATH -Value "$env:ProgramFiles(x86)\NSIS"
            Write-Host "Added $env:ProgramFiles(x86)\NSIS to GITHUB_PATH"
          }

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # Install project requirements; requirements.txt references doi2bib3 via git+https
          pip install -r requirements.txt

      - name: Build with PyInstaller (use spec)
        # Run in the repository root and use the Python interpreter directly.
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          python -m PyInstaller --noconfirm quickbib.spec

      - name: Show dist contents
        shell: pwsh
        run: |
          # PowerShell-compatible listing; avoid failing the step if 'dist' doesn't exist
          if (Test-Path dist) {
            Get-ChildItem -Path dist -Force -Recurse | Sort-Object FullName | Format-Table -AutoSize
          } else {
            Write-Host "dist directory not found"
          }

      - name: Create installer with NSIS
        # Run makensis from the repository root; try common absolute locations if it's not on PATH
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          # Common locations where makensis.exe may be present (include literal paths to avoid env expansion issues)
          $candidates = @(
            'C:\ProgramData\chocolatey\bin\makensis.exe',
            'C:\ProgramData\chocolatey\lib\nsis\tools\makensis.exe',
            'C:\Program Files\NSIS\makensis.exe',
            'C:\Program Files (x86)\NSIS\makensis.exe'
          )

          $found = $null
          foreach ($p in $candidates) {
            if (Test-Path $p) { $found = $p; break }
          }

          # Try Get-Command (may find a shim on PATH)
          if (-not $found) {
            $cmd = Get-Command makensis -ErrorAction SilentlyContinue
            if ($cmd) { $found = $cmd.Source }
          }

          if (-not $found) {
            Write-Error "makensis not found. Checked common locations and PATH."
            Write-Host "Checked candidates:"
            $candidates | ForEach-Object { Write-Host " - $_ : " + (Test-Path $_) }
            Write-Host "Current PATH: $env:PATH"
            Write-Host "Listing C:\Program Files (x86)\NSIS (if present):"
            if (Test-Path 'C:\Program Files (x86)\NSIS') { Get-ChildItem 'C:\Program Files (x86)\NSIS' -Recurse -File | ForEach-Object { Write-Host $_.FullName } }
            exit 1
          }

          Write-Host "Using makensis at: $found"
          & $found "windows_packaging\quickbib.nsi"

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: QuickBib-windows-installer
          path: windows_packaging/QuickBib-Installer.exe

      - name: Create GitHub Release and upload installer (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: windows_packaging/QuickBib-Installer.exe
